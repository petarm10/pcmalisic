/*
 * Laravel Mix
 *
 * Check the documentation at
 * https://laravel-mix.com/
 */

const webpack = require( 'webpack' );
let mix = require( 'laravel-mix' );
require( 'laravel-mix-copy-watched' );


// If you want to copy other assets, use this command
// .copyDirectoryWatched( './assets/src/images', './assets/dist/images' );

mix.setPublicPath( './assets/dist' );

// Compile assets
mix.js( 'assets/src/scripts/app.js', 'assets/dist/js' )
	.sass( 'assets/src/sass/style.scss', 'assets/dist/css',)
	// .sass( 'assets/src/sass/gutenberg.scss', 'assets/dist/css' )
	.copyDirectoryWatched( './assets/src/fonts', './assets/dist/fonts' )
	.copyDirectoryWatched( './assets/src/images', './assets/dist/images' )
	.sourceMaps()
	.options({
		processCssUrls: false
	});

// Autloading jQuery to make it accessible to all the packages, because, you know, reasons
// You can comment this line if you don't need jQuery or Bootstrap
mix.autoload({
	jquery: [ '$', 'window.jQuery', 'jQuery' ],
	bootstrap: [ 'bootstrap' ]
});

mix.setResourceRoot( '../' );

mix.webpackConfig({
	plugins: [
		new webpack.ProgressPlugin( ( percentage, message ) => {
			if ( 0 === percentage * 100 % 5 ) {
				console.log( `${( percentage * 100 ).toFixed()}% ${message}` );
			}
		})
	]
});

// Add versioning to assets in production environment and remove console.log in pord
if ( mix.inProduction() ) {
	mix.version();

	mix.options({
		terser: {
			terserOptions: {
				compress: {
					drop_console: true
				}
			}
		}
	});

} else {
	mix.webpackConfig({ devtool: 'inline-source-map' });
}

// Full API
// mix.js(src, output);
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
